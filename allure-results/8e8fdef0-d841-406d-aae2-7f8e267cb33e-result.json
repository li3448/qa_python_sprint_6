{"name": "Проверка позитивного сценария оформления заказа c двумя точками входа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (875,543) because another element <div class=\"App_CookieConsent__1yUIN\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31", "trace": "self = <test_page_object.tests.test_order_page.TestOrderPage object at 0x1063c37d0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b431624d-c7bb-4398-99df-9bf87cf1a1af\")>, expected_result = 'Заказ оформлен'\n\n    @allure.title('Проверка позитивного сценария оформления заказа c двумя точками входа')\n    @allure.description('Тест для кнопок Заказать в заголовке и середине главной страницы')\n    @pytest.mark.parametrize(\n        \"expected_result\",\n        [\n            (OrderAnswer.ANSWER_0)\n        ]\n    )\n    def test_positive_order(self, driver, expected_result):\n        main_page = OrderPage(driver)\n>       result = main_page.take_positive_order(MainPageLocators.BUTTON_ORDER_TOP,\n                                        OrderPageLocators.BUTTON_NEXT,\n                                        OrderPageLocators.NAME_FIELD,\n                                        OrderAnswer.NAME_1,\n                                        OrderPageLocators.SECOND_NAME_FIELD,\n                                        OrderAnswer.SECOND_NAME_1,\n                                        OrderPageLocators.ADRESS_FIELD,\n                                        OrderAnswer.ADRESS,\n                                        OrderPageLocators.METRO_FIELD,\n                                        OrderPageLocators.METRO_STATION,\n                                        OrderPageLocators.PHONE_FIELD,\n                                        OrderAnswer.PHONE,\n                                        OrderPageLocators.DAY_ORDER,\n                                        OrderPageLocators.DAY_CALENDAR,\n                                        OrderPageLocators.RENT,\n                                        OrderPageLocators.RENT_DURATION,\n                                        OrderPageLocators.COLOR_BLACK,\n                                        OrderPageLocators.COMMENTARY,\n                                        OrderAnswer.COMMENTARY_1,\n                                        OrderPageLocators.BUTTON_ORDER,\n                                        OrderPageLocators.BUTTON_CONFIRMED_YES,\n                                        OrderPageLocators.ORDER_MESSAGE)\n\ntest_page_object/tests/test_order_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_page_object/pages/order_page.py:41: in take_positive_order\n    OrderPage.push_button(self, locator_button_next)\ntest_page_object/pages/order_page.py:56: in push_button\n    self.click_on_element((method_q, locator_q))\ntest_page_object/pages/base_page.py:17: in click_on_element\n    element.click()\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10640b6e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"Button_But...sys.mjs:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (875,543) because another element <div class=\"App_CookieConsent__1yUIN\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "description": "Тест для кнопок Заказать в заголовке и середине главной страницы", "parameters": [{"name": "expected_result", "value": "'Заказ оформлен'"}], "start": 1718145813222, "stop": 1718145814551, "uuid": "a92b104f-6bad-40e6-8c1f-8843af1dd3e5", "historyId": "a4d693dfbbf3f7e8caa568e3ed1e8627", "testCaseId": "bc89b3fb58e44c268f5c6c642aaa8658", "fullName": "test_page_object.tests.test_order_page.TestOrderPage#test_positive_order", "labels": [{"name": "parentSuite", "value": "test_page_object.tests"}, {"name": "suite", "value": "test_order_page"}, {"name": "subSuite", "value": "TestOrderPage"}, {"name": "host", "value": "MacBook-Air-Lapka.local"}, {"name": "thread", "value": "34164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_page_object.tests.test_order_page"}]}